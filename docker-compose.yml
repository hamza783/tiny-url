services:
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      url-redirection:
        condition: service_healthy
      url-shortening:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      API_GATEWAY: ":8080"
      URL_SHORTENING_URL: "http://url-shortening:8081"
      URL_REDIRECTION_GRPC_ADDR: "url-redirection:9000"
      RABBITMQ_URL: "${RABBITMQ_URL}"
      REDIS_URL: "redis:6379"

  url-shortening:
    build:
      context: .
      dockerfile: url-shortening-service/Dockerfile
    container_name: url-shortening
    ports:
      - "8081:8081"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      SHORTENING_SERVICE_ADDR: ":8081"
      RABBITMQ_URL: ${RABBITMQ_URL}
      REDIS_URL: "redis:6379"
      DATABASE_URL: ${DATABASE_URL}
  
  url-redirection:
    build:
      context: .
      dockerfile: url-redirection-service/Dockerfile
    container_name: url-redirection
    ports:
      - "9000:9000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      REDIRECTION_SERVICE_ADDR: ":9000"
      DATABASE_URL: ${DATABASE_URL}
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9000"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
  
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: app
    ports:
      - "5173:5173" 
    volumes:
      - ./app:/app     # hot reload
      - /app/node_modules
    command: ["npm", "run", "dev"]
    depends_on:
      - api-gateway

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: tinyurl_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shared/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d tinyurl_db"]
      interval: 5s
      timeout: 3s
      retries: 5
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

volumes:
  rabbitmq_data:
  redis_data:
  postgres_data: